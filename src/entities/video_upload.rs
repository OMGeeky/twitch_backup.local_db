//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "video_upload")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub video_id: i32,
    #[sea_orm(primary_key, auto_increment = false)]
    pub part: i32,
    pub upload_status: UploadStatus,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::videos::Entity",
        from = "Column::VideoId",
        to = "super::videos::Column::Id"
    )]
    Videos,
}

impl Related<super::videos::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Videos.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(
    Copy, Clone, Debug, EnumIter, DeriveActiveEnum, Ord, PartialOrd, Eq, PartialEq, DeriveDisplay,
)]
#[sea_orm(rs_type = "i32", db_type = "Integer")]
pub enum UploadStatus {
    #[sea_orm(num_value = 0)]
    Pending,
    #[sea_orm(num_value = 10)]
    Uploading,
    #[sea_orm(num_value = 20)]
    Uploaded,
    #[sea_orm(num_value = 30)]
    Failed,
}
