//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use super::status::Status;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "videos")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub user_id: i32,
    pub twitch_id: String,
    pub name: String,
    pub twitch_preview_image_url: Option<String>,
    pub twitch_download_url: Option<String>,
    pub duration: i32,
    pub created_at: String,
    pub youtube_id: Option<String>,
    pub youtube_playlist_name: String,
    pub youtube_preview_image_url: Option<String>,
    pub youtube_playlist_id: Option<String>,
    pub youtube_playlist_created_at: Option<String>,
    pub part_count: i32,
    pub status: Status,
    pub fail_count: i32,
    pub fail_reason: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UserId",
        to = "super::users::Column::Id"
    )]
    Users,
    #[sea_orm(has_many = "super::video_upload::Entity")]
    VideoUpload,
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}
impl Related<super::video_upload::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::VideoUpload.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
